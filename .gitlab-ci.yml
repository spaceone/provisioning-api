# SPDX-License-Identifier: AGPL-3.0-only
# SPDX-FileCopyrightText: 2024 Univention GmbH

---

include:
  - project: "univention/customers/dataport/upx/common-ci"
    ref: "v1.16.2"
    file:
      # TODO: Sphinx docs inherits a stage definition from upstream,
      # has to be included before our default stages to avoid trouble.
      - "jobs/sphinx-docs.yaml"
      - "defaults/stages.yaml"
      - "defaults/souvap-workflow.yaml"
      - "jobs/lint-pre-commit.yaml"
      - "jobs/lint-commit-messages.yaml"
      - "jobs/semantic-release-env.yaml"
      - "jobs/container-build-souvap.yaml"
      - "jobs/package-and-publish-helm-charts-souvap.yaml"
      - "jobs/check-debian-updates.yaml"

  - project: "univention/dist/docker-services"
    ref: "master"
    file:
      - "dind.yml"

lint-pre-commit:
  before_script:
    - helm repo add bitnami https://charts.bitnami.com/bitnami
    - helm repo add nats https://nats-io.github.io/k8s/helm/charts/
    - helm dep build helm/provisioning/charts/events-and-consumer-api
    - helm dep build helm/provisioning/charts/dispatcher
    - helm dep build helm/provisioning/charts/udm-listener

.build-matrix: &build-matrix
  - IMAGE_NAME: "events-and-consumer-api"
    KANIKO_ARGS: "--target final"
    DOCKERFILE_PATH: "docker/events-and-consumer-api/Dockerfile"
  - IMAGE_NAME: "events-and-consumer-api-test"
    KANIKO_ARGS: "--target test"
    DOCKERFILE_PATH: "docker/events-and-consumer-api/Dockerfile"
  - IMAGE_NAME: "udm-listener"
    KANIKO_ARGS: "--target final"
    DOCKERFILE_PATH: "docker/udm-listener/Dockerfile"
  - IMAGE_NAME: "dispatcher"
    KANIKO_ARGS: "--target final"
    DOCKERFILE_PATH: "docker/dispatcher/Dockerfile"
  - IMAGE_NAME: "test"
    DOCKERFILE_PATH: "docker/test/Dockerfile"
  - IMAGE_NAME: "example-client"
    DOCKERFILE_PATH: "docker/example-client/Dockerfile"

.publish-matrix: &publish-matrix
  - IMAGE_NAME:
    - "events-and-consumer-api"
  - IMAGE_NAME:
    - "udm-listener"
  - IMAGE_NAME:
    - "dispatcher"
  - IMAGE_NAME:
    - "example-client"

container-build:
  parallel:
    matrix: *build-matrix
  variables:
    KANIKO_BUILD_CONTEXT: "${CI_PROJECT_DIR}"

container-generate-sbom:
  parallel:
    matrix: *build-matrix

container-sign:
  parallel:
    matrix: *build-matrix

container-security-scan:
  parallel:
    matrix: *build-matrix

test-integration:
  stage: "test"
  extends: .dind
  image: "${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/docker:24.0.7"
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: "never"
    - when: "on_success"
  before_script:
    # Allow that the Docker API version is negotiated between client and server
    - unset DOCKER_API_VERSION
    - export IMAGE_TAG=${RELEASE_VERSION}
    - echo -e "\e[0Ksection_start:`date +%s`:docker_debug[collapsed=true]\r\e[0KDocker version details"
    - echo $IMAGE_TAG
    - docker version
    - echo -e "\e[0Ksection_end:`date +%s`:docker_debug\r\e[0K"
    - echo -e "\e[0Ksection_start:`date +%s`:docker_compose_config[collapsed=true]\r\e[0KDocker Compose configuration"
    - docker compose config test
    - echo -e "\e[0Ksection_end:`date +%s`:docker_compose_config\r\e[0K"
    - docker compose up --no-build --quiet-pull --wait --wait-timeout 60 nats
  script:
    - docker compose run --quiet-pull --rm test /app/.venv/bin/pytest -v tests/integration
  after_script:
    - docker compose down --volumes

test-end-to-end:
  stage: "test"
  extends: .dind
  image: "${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/docker:24.0.7"
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: "never"
    - when: "on_success"
  before_script:
    # Allow that the Docker API version is negotiated between client and server
    - unset DOCKER_API_VERSION
    - export IMAGE_TAG=${RELEASE_VERSION}
    - echo -e "\e[0Ksection_start:`date +%s`:docker_debug[collapsed=true]\r\e[0KDocker version details"
    - echo $IMAGE_TAG
    - docker version
    - echo -e "\e[0Ksection_end:`date +%s`:docker_debug\r\e[0K"
    - echo -e "\e[0Ksection_start:`date +%s`:docker_compose_config[collapsed=true]\r\e[0KDocker Compose configuration"
    - docker compose config test
    - echo -e "\e[0Ksection_end:`date +%s`:docker_compose_config\r\e[0K"
    - docker compose up --no-build --quiet-pull --wait --wait-timeout 60
  script:
    # Wait for UDM Listener to get ready. (It's not worth it to fix this propperly ATM)
    - sleep 10
    - docker compose run --quiet-pull --rm test bash -c 'PROVISIONING_API_HOST=events-and-consumer-api PROVISIONING_API_USERNAME="" PROVISIONING_API_PASSWORD="" /app/.venv/bin/pytest tests/e2e -v --udm-rest-api-base-url "http://udm-rest-api:9979/udm/" --provisioning-api-base-url "http://events-and-consumer-api:7777/"'
  after_script:
    - docker compose down --volumes

# TODO: docker compose run nats ... somehow
test-events-and-consumer-api:
  stage: "test"
  image: "${CI_REGISTRY_IMAGE}/events-and-consumer-api-test:${RELEASE_VERSION}"
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: "never"
    - when: "on_success"
  script:
    - poetry config virtualenvs.in-project true
    - poetry install --with dev
    - poetry run pytest --ignore=tests/integration/ --ignore=tests/e2e --cov --cov-report=term --cov-report=xml:coverage.xml --cov-branch
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml

push-image-souvap:
  parallel:
    matrix: *publish-matrix

container-sign-souvap:
  parallel:
    matrix: *publish-matrix

check-debian-updates:
  parallel:
    matrix: *publish-matrix
  variables:
    TARGET_IMAGE: "${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:latest"
...
