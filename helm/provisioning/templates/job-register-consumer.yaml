# SPDX-License-Identifier: AGPL-3.0-only
# SPDX-FileCopyrightText: 2024 Univention GmbH

---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ printf "%s-register-consumers" (include "common.names.fullname" .) }}
  namespace: {{ include "common.names.namespace" . | quote }}
  labels:
      {{- $commonLabels := include "common.labels.standard" . | fromYaml }}
      {{- $uiLabels := dict "app.kubernetes.io/name" (printf "%s-registerConsumers" (include "common.names.fullname" .)) }}
      {{- $mergedLabels := merge $uiLabels $commonLabels}}
      {{- toYaml $mergedLabels | nindent 4 }}
    {{- if .Values.registerConsumers.additionalLabels }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.registerConsumers.additionalLabels "context" . ) | nindent 4 }}
    {{- end }}
  {{- if .Values.registerConsumers.additionalAnnotations }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" .Values.registerConsumers.additionalAnnotations "context" . ) | nindent 4 }}
  {{- end }}
spec:
  template:
    metadata:
      annotations:
        checksum/configmap: {{ include (print .Template.BasePath "/configmap.yaml") . | sha256sum }}
        {{- if .Values.registerConsumers.podAnnotations }}
        {{- include "common.tplvalues.render" (dict "value" .Values.registerConsumers.podAnnotations "context" .) | nindent 8 }}
        {{- end }}
      labels:
        {{- $commonLabels := include "common.labels.standard" . | fromYaml }}
        {{- $uiLabels := dict "app.kubernetes.io/name" (printf "%s-register-consumers" (include "common.names.fullname" .)) }}
        {{- $mergedLabels := merge $uiLabels $commonLabels}}
        {{- toYaml $mergedLabels | nindent 8 }}
    spec:
      restartPolicy: Never
      volumes:
        - name: consumer-secrets
        {{- if (include "provisioning-register-consumers.jsonSecretName" .) }}
          secret:
            secretName: {{ include "provisioning-register-consumers.jsonSecretName" . | quote }}
        {{- end }}
      initContainers:
        - name: wait-for-api-to-start
          image: "{{ coalesce .Values.registerConsumers.image.registry .Values.global.imageRegistry }}/{{ .Values.registerConsumers.image.repository }}:{{ .Values.registerConsumers.image.tag }}"
          envFrom:
            - configMapRef:
                name: {{ printf "%s-register-consumers" (include "common.names.fullname" .) }}
          command: [ "bash", "-c", "set -euo pipefail; until curl -s ${PROVISIONING_API_BASE_URL} > /dev/null || [ $? -ne 0 ]; do echo Waiting for api; sleep 2; done;" ]
          {{- if .Values.resources.registerConsumers }}
          resources: {{- include "common.tplvalues.render" (dict "value" .Values.resources.registerConsumers "context" .) | nindent 12 }}
          {{- end }}
      containers:
        - name: consumer-registration
          image: "{{ coalesce .Values.registerConsumers.image.registry .Values.global.imageRegistry }}/{{ .Values.registerConsumers.image.repository }}:{{ .Values.registerConsumers.image.tag }}"
          volumeMounts:
            - name: consumer-secrets
              mountPath: "/secrets"
          envFrom:
            - configMapRef:
                name: {{ printf "%s-register-consumers" (include "common.names.fullname" .) }}
          {{- if (include "provisioning-register-consumers.credentialSecretName" .) }}
            - secretRef:
                name: {{ include "provisioning-register-consumers.credentialSecretName" . | quote }}
          {{- end }}
          command:
            - "/bin/sh"
            - "-c"
          args:
            - |
              for file in /secrets/*; do
                filename=$(basename "${file}" .json)
                response=$(curl -s -o response.txt -w "%{http_code}" -u "${ADMIN_USERNAME}":"${ADMIN_PASSWORD}" \
                -H 'Content-Type: application/json' \
                -d @"${file}" "${PROVISIONING_API_BASE_URL}")
                if [ "${response}" -eq 201 ]; then
                  echo "Successful registration of the consumer: "${filename}""
                elif [ "${response}" -eq 200 ]; then
                  echo "Consumer with the name '"${filename}"' is already registered with the same parameters"
                else
                  echo "Failed to register the consumer: "${filename}"
              Response code: "${response}"
              Response body: $(cat response.txt)"
                  exit 1
                fi
                echo ------------------------------------
              done
          {{- if .Values.resources.registerConsumers }}
          resources: {{- include "common.tplvalues.render" (dict "value" .Values.resources.registerConsumers "context" .) | nindent 12 }}
          {{- end }}
