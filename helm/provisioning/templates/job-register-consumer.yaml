# SPDX-License-Identifier: AGPL-3.0-only
# SPDX-FileCopyrightText: 2024 Univention GmbH

---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ printf "%s-register-consumers" (include "common.names.fullname" .) }}
spec:
  template:
    spec:
      restartPolicy: Never
      volumes:
        - name: consumer-secrets
        {{- if (include "provisioning-register-consumers.jsonSecretName" .) }}
          secret:
            secretName: {{ include "provisioning-register-consumers.jsonSecretName" . | quote }}
        {{- end }}
      initContainers:
        - name: wait-for-api-to-start
          image: "{{ coalesce .Values.register_consumers.image.registry .Values.global.imageRegistry }}/{{ .Values.register_consumers.image.repository }}:{{ .Values.register_consumers.image.tag }}"
          envFrom:
            - configMapRef:
                name: {{ printf "%s-register-consumers" (include "common.names.fullname" .) }}
          command: [ "sh", "-c", "until curl -s ${PROVISIONING_API_BASE_URL} > /dev/null; do echo Waiting for api; sleep 2; done;" ]
          resources:
            requests:
              memory: "64Mi"
              cpu: "250m"
            limits:
              memory: "128Mi"
              cpu: "500m"
      containers:
        - name: consumer-registration
          image: "{{ coalesce .Values.register_consumers.image.registry .Values.global.imageRegistry }}/{{ .Values.register_consumers.image.repository }}:{{ .Values.register_consumers.image.tag }}"
          volumeMounts:
            - name: consumer-secrets
              mountPath: "/secrets"
          envFrom:
            - configMapRef:
                name: {{ printf "%s-register-consumers" (include "common.names.fullname" .) }}
          {{- if (include "provisioning-register-consumers.credentialSecretName" .) }}
            - secretRef:
                name: {{ include "provisioning-register-consumers.credentialSecretName" . | quote }}
          {{- end }}
          command:
            - "/bin/sh"
            - "-c"
          args:
            - |
              for file in /secrets/*; do
                filename=$(basename "${file}" .json)
                response=$(curl -s -o response.txt -w "%{http_code}" -u "${ADMIN_USERNAME}":"${ADMIN_PASSWORD}" \
                -H 'Content-Type: application/json' \
                -d @"${file}" "${PROVISIONING_API_BASE_URL}")
                if [ "${response}" -eq 201 ]; then
                  echo "Successful registration of the consumer: "${filename}""
                elif [ "${response}" -eq 400 ]; then
                  echo "Consumer with the name '"${filename}"' is already registered"
                else
                  echo "Failed to register the consumer: "${filename}"
              Response code: "${response}"
              Response body: $(cat response.txt)"
                  exit 1
                fi
                echo ------------------------------------
              done
          resources:
            limits:
              cpu: "500m"
              memory: "256Mi"
            requests:
              cpu: "250m"
              memory: "128Mi"
